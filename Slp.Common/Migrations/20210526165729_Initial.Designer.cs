// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Slp.Common.DataAccess;

namespace Slp.Common.Migrations
{
    [DbContext(typeof(SlpDbContext))]
    [Migration("20210526165729_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Slp.Common.Models.DbModels.DatabaseState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BlockTip")
                        .HasColumnType("int");

                    b.Property<string>("BlockTipHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("LastStatusUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SlpDatabaseState");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpAddress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasFilter("[Address] IS NOT NULL");

                    b.ToTable("SlpAddress");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpBlock", b =>
                {
                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<DateTime>("BlockTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Hash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<byte>("IsSlp")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Orphaned")
                        .HasColumnType("bit");

                    b.HasKey("Height");

                    b.HasIndex("Hash");

                    b.ToTable("SlpBlock");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpToken", b =>
                {
                    b.Property<byte[]>("Hash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("ActiveMint")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("BlockLastActiveMint")
                        .HasColumnType("int");

                    b.Property<int?>("BlockLastActiveSend")
                        .HasColumnType("int");

                    b.Property<decimal?>("CirculatingSupply")
                        .HasColumnType("decimal (38,0)");

                    b.Property<int>("Decimals")
                        .HasColumnType("int");

                    b.Property<string>("DocumentSha256Hex")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentUri")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LastActiveSend")
                        .HasColumnType("int");

                    b.Property<string>("MintingBatonStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SatoshisLockedUp")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("TotalBurned")
                        .HasColumnType("decimal (38,0)");

                    b.Property<decimal?>("TotalMinted")
                        .HasColumnType("decimal (38,0)");

                    b.Property<int?>("TxnsSinceGenesis")
                        .HasColumnType("int");

                    b.Property<int?>("ValidAddresses")
                        .HasColumnType("int");

                    b.Property<int?>("ValidTokenUtxos")
                        .HasColumnType("int");

                    b.Property<int>("VersionType")
                        .HasColumnType("int");

                    b.HasKey("Hash");

                    b.ToTable("SlpToken");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpTransaction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("AdditionalTokenQuantity")
                        .HasColumnType("decimal (38,0)");

                    b.Property<int?>("BlockHeight")
                        .HasColumnType("int");

                    b.Property<byte[]>("Hash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("InvalidReason")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("MintBatonVOut")
                        .HasColumnType("int");

                    b.Property<byte[]>("SlpTokenId")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<int>("SlpTokenType")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal?>("TokenInputSum")
                        .HasColumnType("decimal (38,0)");

                    b.Property<decimal?>("TokenOutputSum")
                        .HasColumnType("decimal (38,0)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockHeight");

                    b.HasIndex("Hash");

                    b.HasIndex("SlpTokenId");

                    b.ToTable("SlpTransaction");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpTransactionInput", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("BlockchainSatoshis")
                        .HasColumnType("decimal (38,0)");

                    b.Property<decimal>("SlpAmount")
                        .HasColumnType("decimal (38,0)");

                    b.Property<long>("SlpTransactionId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("SourceTxHash")
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<int>("VOut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("SlpTransactionId");

                    b.ToTable("SlpTransactionInput");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpTransactionOutput", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AddressId")
                        .HasMaxLength(128)
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal (38,0)");

                    b.Property<decimal>("BlockchainSatoshis")
                        .HasColumnType("decimal (38,0)");

                    b.Property<long?>("NextInputId")
                        .HasColumnType("bigint");

                    b.Property<long>("SlpTransactionId")
                        .HasColumnType("bigint");

                    b.Property<int>("VOut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NextInputId");

                    b.HasIndex("SlpTransactionId");

                    b.ToTable("SlpTransactionOutput");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpTransaction", b =>
                {
                    b.HasOne("Slp.Common.Models.DbModels.SlpBlock", "Block")
                        .WithMany()
                        .HasForeignKey("BlockHeight");

                    b.HasOne("Slp.Common.Models.DbModels.SlpToken", "SlpToken")
                        .WithMany("Transactions")
                        .HasForeignKey("SlpTokenId");

                    b.Navigation("Block");

                    b.Navigation("SlpToken");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpTransactionInput", b =>
                {
                    b.HasOne("Slp.Common.Models.DbModels.SlpAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slp.Common.Models.DbModels.SlpTransaction", "SlpTransaction")
                        .WithMany("SlpTransactionInputs")
                        .HasForeignKey("SlpTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("SlpTransaction");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpTransactionOutput", b =>
                {
                    b.HasOne("Slp.Common.Models.DbModels.SlpAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slp.Common.Models.DbModels.SlpTransactionInput", "NextInput")
                        .WithMany()
                        .HasForeignKey("NextInputId");

                    b.HasOne("Slp.Common.Models.DbModels.SlpTransaction", "SlpTransaction")
                        .WithMany("SlpTransactionOutputs")
                        .HasForeignKey("SlpTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("NextInput");

                    b.Navigation("SlpTransaction");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpToken", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Slp.Common.Models.DbModels.SlpTransaction", b =>
                {
                    b.Navigation("SlpTransactionInputs");

                    b.Navigation("SlpTransactionOutputs");
                });
#pragma warning restore 612, 618
        }
    }
}
